[
  {
    "objectID": "notebooks/packages.html",
    "href": "notebooks/packages.html",
    "title": "Packages Used",
    "section": "",
    "text": "Python\nPandas\nUsed in online courses, at work, and in grad school.\nNumpy\nSame as pandas, but mostly used it when working with predictive models (e.g. linear regression, Naive Bayes, etc.).\nMatplotlib\nI’ve used it from the beginning of my Data Science career.\nSeaborn\nJust like Matplotlib, I feel very comfortable creating plots using these packages.\nScikit-learn\nI use this package for most, if not all, of the more straightforward models I’ve created (e.g. regression, clusterization, etc.).\nPlotly\nUsed for my statistics class in grad school. Got an intro to interactive plots; I hope to get more exposure to it.\nBeautifulSoup\nFinal projects for undergrad and grad school required me to do some web scraping.\nre\nNLP course required extensive cleaning of text data, which led me to the regex package.\nTransformers\nUtilized this library in an Natural Language Processing class. I specifically used the BERT and GPT2 models for classification and text generation projects.\nTensorFlow\nMinimal exposure to this library. I had to work with it while creating the Transformers models.\n\n\n\nR\ntidyr\nAlthough I had experience with this library from the online courses I took, two of my first-semester courses from grad school ensured we used it on a weekly basis.\ndplyr\nUsed it along with tidyr to clean the data we used and put in in tidy format.\nggplot2\nMuch like Seaborn with Python, I create most of my graphs and illustrations with this library.\nrpart\nUsed it in one of my online courses to create classification and regression trees.\nrandomForest\nMuch like the name suggests, this libraries helps with creating random forests, although I have a preference for doing this in Python.\nnaivebayes\nAgain, as the library name suggests, I used this to create Naïve Bayes models."
  },
  {
    "objectID": "notebooks/contactInfo.html",
    "href": "notebooks/contactInfo.html",
    "title": "Contact Info",
    "section": "",
    "text": "Here is my contact info"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "My Portfolio",
    "section": "",
    "text": "The goal of this page is to tell you a bit about myself and to exhibit some of the projects I’ve worked on since I began my data science journey (circa 2020)\nYou will find some of the projects I’ve completed for online courses, work, and grad school\nYou can access my LinkedIn and GitHub pages from the top-left buttons\nFeel free to change between dark and light themes using the toggle\n\n\n\n\nThe About Me section details exposure to packages I’ve used. It also contains my Résumé and contact info. The three other sections showcase some of the deliverables I’ve created, in reverse chronological order. The Grad School tab is from late 2022, the Work tab is from 2020 to early 2022, and the Base Python tab is from late 2021.\n\n\n\nAs an undergrad, I studied Business Administration (INTL BUS & ISOM) and French Language and Literature. My program specializations taught me the importance of leveraging technology and data to grow a business, but it failed to build a mathematical foundation to help me understand the technical side of it all. This left me with a desire to dive deeper into the data world, so I decided to study Data Science in grad school. I hope to learn about different fields in this practice to get a holistic understanding of . After graduation, my intention is to work as a data scientist at a company that grants me creative freedom and encourages iterative data science, rather than linear problem solving.\n\n\n\nI spend it playing sports (mainly soccer and racket sports), video games, and reading. I have two dogs back at home, Coco and Pucca, who I spend most of my time with (when home) and now I’ve also adopted two kittens (Edna and Remy) to have with me in DC. Aside from all this, I greatly enjoy listening to and playing music; some of my favorite artists are Stromae, Yanni, and Hanz Zimmer."
  },
  {
    "objectID": "notebooks/resume.html",
    "href": "notebooks/resume.html",
    "title": "Resume",
    "section": "",
    "text": "{height=100%}"
  },
  {
    "objectID": "notebooks/blackjack.html",
    "href": "notebooks/blackjack.html",
    "title": "Blackjack",
    "section": "",
    "text": "For the base Python course I took, I had to create a Blackjack game. To see the code for the game, click on the arrow beside the “code” text. The output you see is a trial run for one round of the game in which I win 5 coins and then choose to end the game.\n\n\nCode\n# import random libray\nimport random\n\n# initiate variables for a deck of cards\nsuits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')\nranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':10,\n         'Queen':10, 'King':10, 'Ace':11}\n\n# set the playing variable to True\nplaying = True\n\n####\n\n# create a card class that returns a card's suit and rank\nclass Card:\n\n    def __init__(self,suit,rank):\n        self.suit = suit\n        self.rank = rank\n        \n    def __str__(self):\n        return self.rank + ' of ' + self.suit\n\n####\n\n# create a Deck class\nclass Deck:\n    \n    # to create a new deck\n    def __init__(self):\n        self.deck = []  # start with an empty list\n        for suit in suits:\n            for rank in ranks:\n                self.deck.append(Card(suit,rank))  # build Card objects and add them to the list\n    \n    # to show what's in the deck\n    def __str__(self):\n        deck_comp = ''  # start with an empty string\n        for card in self.deck:\n            deck_comp += '\\n '+card.__str__() # add each Card object's print string\n        return 'The deck has:' + deck_comp\n\n    # to shuffle the deck\n    def shuffle(self):\n        random.shuffle(self.deck)\n    \n    # to deal a card from the deck\n    def deal(self):\n        single_card = self.deck.pop()\n        return single_card\n\n####\n\n# create a hand class\nclass Hand:\n    \n    # initiate the hand with nothing\n    def __init__(self):\n        self.cards = []  # start with an empty list as we did in the Deck class\n        self.value = 0   # start with zero value\n        self.aces = 0    # add an attribute to keep track of aces\n    \n    # create function to add cards to the hand\n    def add_card(self,card):\n        self.cards.append(card)\n        self.value += values[card.rank]\n        if card.rank == 'Ace':\n            self.aces += 1  # add to self.aces\n    \n    # define a function that takes an ace into account\n    def adjust_for_ace(self):\n        while self.value > 21 and self.aces:\n            self.value -= 10\n            self.aces -= 1 \n\n####\n\n# create a class to keep track of the chips at hand\nclass Chips:\n    \n    # initialize the chip count at 100\n    def __init__(self):\n        self.total = 100  # This can be set to a default value or supplied by a user input\n        self.bet = 0\n    \n    # define function to add chips if we win\n    def win_bet(self):\n        self.total += self.bet\n    \n    # define function to remove chips if we lose\n    def lose_bet(self):\n        self.total -= self.bet\n\n####\n\n# create a function to take a bet from the player\ndef take_bet(chips):\n    \n    # ask the player how much they want to bet\n    while True:\n        try:\n            chips.bet = int(input('How many chips would you like to bet? '))\n        except ValueError:\n            print('Sorry, a bet must be an integer!')\n        else:\n            if chips.bet > chips.total:\n                print(\"Sorry, your bet can't exceed\",chips.total)\n            else:\n                break\n\n####\n\n# create a function to deal cards\ndef hit(deck,hand):\n    \n    hand.add_card(deck.deal())\n    hand.adjust_for_ace()\n\n####\n\n# create a function for player decision\ndef hit_or_stand(deck,hand):\n    global playing  # to control an upcoming while loop\n    \n    # create a loop to ask the player if they want to hit or stand\n    while True:\n        x = input(\"Would you like to Hit or Stand? Enter 'h' or 's' \")\n        \n        if x[0].lower() == 'h':\n            hit(deck,hand)  # hit() function defined above\n\n        elif x[0].lower() == 's':\n            print(\"Player stands. Dealer is playing.\")\n            playing = False\n\n        else:\n            print(\"Sorry, please try again.\")\n            continue\n        break\n\n####\n\n# define functions for the game\ndef show_some(player,dealer):\n    print(\"\\nDealer's Hand:\")\n    print(\" <card hidden>\")\n    print('',dealer.cards[1])  \n    print(\"\\nPlayer's Hand:\", *player.cards, sep='\\n ')\n    \ndef show_all(player,dealer):\n    print(\"\\nDealer's Hand:\", *dealer.cards, sep='\\n ')\n    print(\"Dealer's Hand =\",dealer.value)\n    print(\"\\nPlayer's Hand:\", *player.cards, sep='\\n ')\n    print(\"Player's Hand =\",player.value)\n\ndef player_busts(player,dealer,chips):\n    print(\"Player busts!\")\n    chips.lose_bet()\n\ndef player_wins(player,dealer,chips):\n    print(\"Player wins!\")\n    chips.win_bet()\n\ndef dealer_busts(player,dealer,chips):\n    print(\"Dealer busts!\")\n    chips.win_bet()\n    \ndef dealer_wins(player,dealer,chips):\n    print(\"Dealer wins!\")\n    chips.lose_bet()\n    \ndef push(player,dealer):\n    print(\"Dealer and Player tie! It's a push.\")\n\n\n\n\nCode\n# PLAY THE GAME\n\nwhile True:\n    # Print an opening statement\n    print('Welcome to BlackJack! Get as close to 21 as you can without going over!\\n\\\n    Dealer hits until she reaches 17. Aces count as 1 or 11.')\n    \n    # Create & shuffle the deck, deal two cards to each player\n    deck = Deck()\n    deck.shuffle()\n    \n    player_hand = Hand()\n    player_hand.add_card(deck.deal())\n    player_hand.add_card(deck.deal())\n    \n    dealer_hand = Hand()\n    dealer_hand.add_card(deck.deal())\n    dealer_hand.add_card(deck.deal())\n            \n    # Set up the Player's chips\n    player_chips = Chips()  # remember the default value is 100    \n    \n    # Prompt the Player for their bet\n    take_bet(player_chips)\n    \n    # Show cards (but keep one dealer card hidden)\n    show_some(player_hand,dealer_hand)\n    \n    while playing:  # recall this variable from our hit_or_stand function\n        \n        # Prompt for Player to Hit or Stand\n        hit_or_stand(deck,player_hand) \n        \n        # Show cards (but keep one dealer card hidden)\n        show_some(player_hand,dealer_hand)  \n        \n        # If player's hand exceeds 21, run player_busts() and break out of loop\n        if player_hand.value > 21:\n            player_busts(player_hand,dealer_hand,player_chips)\n            break        \n\n\n    # If Player hasn't busted, play Dealer's hand until Dealer reaches 17 \n    if player_hand.value <= 21:\n        \n        while dealer_hand.value < 17:\n            hit(deck,dealer_hand)    \n    \n        # Show all cards\n        show_all(player_hand,dealer_hand)\n        \n        # Run different winning scenarios\n        if dealer_hand.value > 21:\n            dealer_busts(player_hand,dealer_hand,player_chips)\n\n        elif dealer_hand.value > player_hand.value:\n            dealer_wins(player_hand,dealer_hand,player_chips)\n\n        elif dealer_hand.value < player_hand.value:\n            player_wins(player_hand,dealer_hand,player_chips)\n\n        else:\n            push(player_hand,dealer_hand)        \n    \n    # Inform Player of their chips total \n    print(\"\\nPlayer's winnings stand at\",player_chips.total)\n    \n    # Ask to play again\n    new_game = input(\"Would you like to play another hand? Enter 'y' or 'n' \")\n    \n    if new_game[0].lower()=='y':\n        playing=True\n        continue\n    else:\n        print(\"Thanks for playing!\")\n        break\n\n\nWelcome to BlackJack! Get as close to 21 as you can without going over!\n    Dealer hits until she reaches 17. Aces count as 1 or 11.\n\nDealer's Hand:\n <card hidden>\n Six of Clubs\n\nPlayer's Hand:\n Nine of Hearts\n Two of Hearts\n\nDealer's Hand:\n <card hidden>\n Six of Clubs\n\nPlayer's Hand:\n Nine of Hearts\n Two of Hearts\n Five of Diamonds\nPlayer stands. Dealer is playing.\n\nDealer's Hand:\n <card hidden>\n Six of Clubs\n\nPlayer's Hand:\n Nine of Hearts\n Two of Hearts\n Five of Diamonds\n\nDealer's Hand:\n Ten of Diamonds\n Six of Clubs\n Eight of Spades\nDealer's Hand = 24\n\nPlayer's Hand:\n Nine of Hearts\n Two of Hearts\n Five of Diamonds\nPlayer's Hand = 16\nDealer busts!\n\nPlayer's winnings stand at 105\nThanks for playing!"
  },
  {
    "objectID": "notebooks/cardgamewar.html",
    "href": "notebooks/cardgamewar.html",
    "title": "Card Game War",
    "section": "",
    "text": "Like the two previous games, I had to create a version of the War card game in which you draw the top card from your deck and the higher card gets to keep both cards. If the cards are of the same value, you go to war and draw again, repeating the process until one of the cards has a higher value.\n\n\nCode\n# create the required variables to make a deck of cards\nimport random\nsuits = ('Hearts', 'Diamonds', 'Spades', 'Clubs')\nranks = ('Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine', 'Ten', 'Jack', 'Queen', 'King', 'Ace')\nvalues = {'Two':2, 'Three':3, 'Four':4, 'Five':5, 'Six':6, 'Seven':7, 'Eight':8, 'Nine':9, 'Ten':10, 'Jack':11,\n          'Queen':12, 'King':13, 'Ace':14}\n\n# card class\nclass CARD():\n    \n    # returns a card's suit, rank, or value\n    def __init__(self, suit, rank):\n        self.suit = suit\n        self.rank = rank\n        self.value = values[rank]\n        \n    def __str__(self):\n        return self.rank + \" of \" + self.suit\n\n# deck class\nclass DECK():\n    \n    # initialize a deck of cards\n    def __init__(self):\n        self.all_cards = []\n        for suit in suits:\n            for rank in ranks:\n                created_card = CARD(suit, rank)\n                self.all_cards.append(created_card)\n    \n    # create function to shuffle the deck\n    def shuffle(self):\n        random.shuffle(self.all_cards)\n    \n    # create function to deal a card\n    def deal_one(self):\n        return self.all_cards.pop()\n\n# player class\nclass PLAYER():\n    \n    # initialize player with name and empty hand\n    def __init__(self, name):\n        self.name = name\n        self.all_cards = []\n    \n    # define function to remove a card from the hand\n    def remove_one(self):\n        return self.all_cards.pop(0)\n    \n    # function to add card(s) to the hand\n    def add_cards(self, new_cards):\n        if type(new_cards) == type([]):\n            # list of multiple card objects\n            self.all_cards.extend(new_cards)\n        else:\n            # single card\n            self.all_cards.append(new_cards)\n    \n    def __str__(self):\n        return f'Player {self.name} has {len(self.all_cards)} cards'\n\n# Game setup\nplayer_one = PLAYER('one')\nplayer_two = PLAYER('two')\n\nnew_deck = DECK()\nnew_deck.shuffle()\n\nfor x in range(26):\n    player_one.add_cards(new_deck.deal_one())\n    player_two.add_cards(new_deck.deal_one())\n\n\n\n\nCode\n# start the game\ngame_on = True\nround_num = 0\nwhile game_on:\n    \n    # keep track of the rounds\n    round_num += 1\n    print(f'round number {round_num}')\n    \n    # if statement to end game when a player has no cards\n    if len(player_one.all_cards) == 0:\n        print(\"Player one out of cards, player two wins!\")\n        game_on = False\n        break\n    \n    # same statement as above but with the other player\n    if len(player_two.all_cards) == 0:\n        print(\"Player two out of cards, player one wins!\")\n        game_on = False\n        break\n        \n    # Start a new round\n    player_one_cards = []\n    player_one_cards.append(player_one.remove_one())\n    \n    player_two_cards = []\n    player_two_cards.append(player_two.remove_one())\n    \n    \n    # While at war\n    at_war = True\n    \n    while at_war:\n        if player_one_cards[-1].value >  player_two_cards[-1].value:\n            player_one.add_cards(player_one_cards)\n            player_one.add_cards(player_two_cards)\n            at_war = False\n        elif player_two_cards[-1].value >  player_one_cards[-1].value:\n            player_two.add_cards(player_two_cards)\n            player_two.add_cards(player_one_cards)\n            at_war = False\n        else:\n            print(\"WAR\")\n            if len(player_one.all_cards) < 5:\n                print('Player one unable to go to war')\n                print('Player two wins')\n                game_on = False\n                break\n            elif len(player_two.all_cards) < 5:\n                print('Player two unable to go to war')\n                print('Player one wins')\n                game_on = False\n                break\n            else:\n                for num in range(3):\n                    player_one_cards.append(player_one.remove_one())\n                    player_two_cards.append(player_two.remove_one())\n\n\nround number 1\nround number 2\nround number 3\nround number 4\nround number 5\nround number 6\nround number 7\nround number 8\nround number 9\nround number 10\nround number 11\nround number 12\nround number 13\nround number 14\nWAR\nround number 15\nround number 16\nround number 17\nround number 18\nround number 19\nround number 20\nWAR\nround number 21\nWAR\nround number 22\nround number 23\nround number 24\nround number 25\nround number 26\nround number 27\nWAR\nround number 28\nround number 29\nround number 30\nround number 31\nround number 32\nround number 33\nround number 34\nround number 35\nround number 36\nround number 37\nWAR\nround number 38\nround number 39\nround number 40\nround number 41\nround number 42\nPlayer one out of cards, player two wins!"
  },
  {
    "objectID": "notebooks/tictactoe.html",
    "href": "notebooks/tictactoe.html",
    "title": "Tic Tac Toe",
    "section": "",
    "text": "Similar to the Blackjack game, I had to create a tic tac toe script that would allow two people to play on the computer. The program creates a board with positions from 1-9 and the players alternate between choosing where to make a play. The game will detect when a player wins and ask if they wish to play again or end the session. The output below shows the first move of a new game, in which a player decided to put an “X” on the first position.\n\n\nCode\n# import necessary libraries\nfrom IPython.display import clear_output\nimport time\n\n# variables to tell program when someone wins\nendlist1 = ['X', 'X', 'X']\nendlist2 = ['O', 'O', 'O']\n\n# function to record player choice of X or O\ndef XorO():\n    choiceP1 = 'wrong'\n    while choiceP1 not in ['X', 'O']:      \n        clear_output()\n        choiceP1 = input('P1, would you like to be X or O?')\n        if choiceP1 == 'X':\n            clear_output()\n            print('P1 has chosen X. P2 will be O.')\n            return ['X', 'O', 'X', 'O', 'X', 'O', 'X', 'O', 'X', 'k']\n        elif choiceP1 == 'O':\n            clear_output()\n            print('P1 has chosen O. P2 will be X.')\n            return ['O', 'X', 'O', 'X', 'O', 'X', 'O', 'X', 'O', 'k']\n        else:\n            clear_output()\n            print('Please select an available input (X/O).')\n            time.sleep(3)\n\n# function to display the board\ndef display_board(l1, l2, l3, l4, l5):\n    print(*l1)\n    print(*l2)\n    print(*l3)\n    print(*l4)\n    print(*l5)\n\n# function to reset the board\ndef reset_board():\n    global a, b, c, d, e\n    a = ['1', '|', '2', '|', '3']\n    b = ['---------']\n    c = ['4', '|', '5', '|', '6']\n    d = ['---------']\n    e = ['7', '|', '8', '|', '9']\n\n# function to select a place in the board\ndef place():\n    mylist = ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n    place_choice = 'wrong'\n    correct = False\n    while place_choice not in mylist and correct == False:\n        clear_output()\n        print('This is the current board.')\n        print('')\n        display_board(a, b, c, d, e)\n        place_choice = input('Which place would you like to select?')\n        if place_choice == '1':\n            if 'X' != a[0] and 'O' != a[0]:\n                a[0] = choices[0]\n                del choices [0]\n                correct = True\n                return a, choices\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '2':\n            if 'X' != a[2] and 'O' != a[2]:\n                a[2] = choices[0]\n                del choices [0]\n                correct = True\n                return a\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '3':\n            if 'X' != a[4] and 'O' != a[4]:\n                a[4] = choices[0]\n                del choices [0]\n                correct = True\n                return a\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '4':\n            if 'X' != c[0] and 'O' != c[0]:\n                c[0] = choices[0]\n                del choices [0]\n                correct = True\n                return c\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '5':\n            if 'X' != c[2] and 'O' != c[2]:\n                c[2] = choices[0]\n                del choices [0]\n                correct = True\n                return c\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '6':\n            if 'X' != c[4] and 'O' != c[4]:\n                c[4] = choices[0]\n                del choices [0]\n                correct = True\n                return c\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '7':\n            if 'X' != e[0] and 'O' != e[0]:\n                e[0] = choices[0]\n                del choices [0]\n                correct = True\n                return e\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '8':\n            if 'X' != e[2] and 'O' != e[2]:\n                e[2] = choices[0]\n                del choices [0]\n                correct = True\n                return e\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n        elif place_choice == '9':\n            if 'X' != e[4] and 'O' != e[4]:\n                e[4] = choices[0]\n                del choices [0]\n                correct = True\n                return e\n            else:\n                clear_output()\n                print('Please select a valid option on the board.')\n                time.sleep(3)\n                place()\n\nendlist1 = ['X', 'X', 'X']\nendlist2 = ['O', 'O', 'O']\n\n# function to identify when someone wins\ndef endgame():\n    reset_board()\n    horizontal1 = list(a[0:5:2])\n    horizontal2 = list(c[0:5:2])\n    horizontal3 = list(e[0:5:2])\n    vertical1 = list(a[0] + c[0] + e[0])\n    vertical2 = list(a[2] + c[2] + e[2])\n    vertical3 = list(a[4] + c[4] + e[4])\n    diagonal1 = list(a[0] + c[2] + e[4])\n    diagonal2 = list(a[4] + c[2] + e[0])\n    listofendgames = [horizontal1] + [horizontal2] + [horizontal3] + [vertical1] + [vertical2] + [vertical3] + [diagonal1] + [diagonal2]\n    end = False\n    while end == False and endlist1 not in listofendgames and endlist2 not in listofendgames and choices[0] != 'k':\n        place()\n        horizontal1 = list(a[0:5:2])\n        horizontal2 = list(c[0:5:2])\n        horizontal3 = list(e[0:5:2])\n        vertical1 = list(a[0] + c[0] + e[0])\n        vertical2 = list(a[2] + c[2] + e[2])\n        vertical3 = list(a[4] + c[4] + e[4])\n        diagonal1 = list(a[0] + c[2] + e[4])\n        diagonal2 = list(a[4] + c[2] + e[0])\n        listofendgames = [horizontal1] + [horizontal2] + [horizontal3] + [vertical1] + [vertical2] + [vertical3] + [diagonal1] + [diagonal2]\n    else:\n        if choices[0] == 'k':\n            end = True\n            clear_output()\n            print('It is a draw!')\n            time.sleep(3)\n            play_again()\n        elif endlist1 in listofendgames:\n            end = True\n            clear_output()\n            print('Congrats X player, you have won!')\n            time.sleep(3)\n            play_again()\n        else:\n            end = True\n            clear_output()\n            print('Congrats O player, you have won!')\n            time.sleep(3)\n            play_again()\n\n# play again function\ndef play_again():\n    answer = 'wrong'\n    while answer == 'wrong':\n        clear_output()\n        answer = input('Would you like to play tic-tac-toe (Y or N)?')\n        if answer == 'Y':\n            global choices\n            choices = XorO()\n            endgame()\n        elif answer == 'N':\n            print('Thanks for choosing Edy Corporation.')\n            time.sleep(3)\n            break\n        else:\n            clear_output()\n            print('Please select the correct input (Y/N).')\n            time.sleep(3)\n            play_again()\n\n\n\n\nCode\nplay_again()\n\n\nThis is the current board.\n\nX | 2 | 3\n---------\n4 | 5 | 6\n---------\n7 | 8 | 9\n\n\n\n\n\nVersion 1.0"
  },
  {
    "objectID": "notebooks/Modelo Regresivo TAM.html",
    "href": "notebooks/Modelo Regresivo TAM.html",
    "title": "DF es el dataframe agrupado por año y mes",
    "section": "",
    "text": "import pandas as pd\nimport numpy as np\n\n# agarrar la tabla del container\ndf = spark.read.csv(\n    \"/mnt/data_lake/SandBox/DataAnalytics/jaime_figueroa/TAM/RawData/TablaDQUAPIB\", \n    header=True, \n    inferSchema=True,\n    lineSep=\"\\n\")\n\n# convertir la tabla en pandas\ndf = df.toPandas()\n\n# la tabla tiene un nombre inusual en la útlima columna. aquí lo cambiamos a Lag3\ndf.rename(columns={'Lag3\\r':'Lag3'}, inplace=True)\n\n# creamos una función para agregar una columna de trimestre con label de string\ndef trimestre(df):\n  if df['MONTH'] <= 3:\n    return 'T1'\n  elif df['MONTH'] >= 4 and df['MONTH'] <= 6:\n    return 'T2'\n  elif df['MONTH'] >= 7 and df['MONTH'] <= 9:\n    return 'T3'\n  else:\n    return 'T4'\n\n# creamos una función para agregar una columna de trimestre con label numérico\ndef trimestre2(df):\n  if df['MONTH'] <= 3:\n    return 1\n  elif df['MONTH'] >= 4 and df['MONTH'] <= 6:\n    return 2\n  elif df['MONTH'] >= 7 and df['MONTH'] <= 9:\n    return 3\n  else:\n    return 4\n  \n# usamos las funciones para agregar las variables nuevas\ndf['Trimestre'] = df.apply(trimestre, axis=1)\ndf['Trimestre2'] = df.apply(trimestre2, axis=1)\n\n# creamos el valor de MXPAD para asignar a cada año\nMXPAD11 = [21763]\nMXPAD12 = [23035]\nMXPAD13 = [23449]\nMXPAD14 = [24039]\nMXPAD15 = [24552]\nMXPAD16 = [23748]\nMXPAD17 = [17894]\nMXPAD18 = [17946]\nMXPAD19 = [15638]\nMXPAD20 = [13841]\nMXPAD21 = [7893]\n\n# lo multiplicamos por 12 para que haya una instancia por mes del año. MXPAD21 son solamente 6 meses\nMXPAD11 = MXPAD11*12\nMXPAD12 = MXPAD12*12\nMXPAD13 = MXPAD13*12\nMXPAD14 = MXPAD14*12\nMXPAD15 = MXPAD15*12\nMXPAD16 = MXPAD16*12\nMXPAD17 = MXPAD17*12\nMXPAD18 = MXPAD18*12\nMXPAD19 = MXPAD19*12\nMXPAD20 = MXPAD20*12\nMXPAD21 = MXPAD21*6\n\n# los unimos para poder agregar la columna a la tabla\nMXPAD = MXPAD11 + MXPAD12 + MXPAD13 + MXPAD14 + MXPAD15 + MXPAD16 + MXPAD17 + MXPAD18 + MXPAD19 + MXPAD20 + MXPAD21\n\n# creamos un df4 para hacer los cambios necesarios\ndf4 = df\n# porcentaje de ratio tomando todos los meses agrupados y dividiendo por cantidad total vendida\nmylist = list((df.groupby('MONTH').sum()['DQUA'] / df['DQUA'].sum()))\n# multiplicar para tener la misma cantidad de años\nmylist2 = mylist*10\n# agregarle los 6 meses de final de la tabla\nmylist3 = mylist2 + mylist[0:6]\n# agregar la columna de porcentaje promedio por mes con todos los años\ndf4['%meanYear'] = mylist3\n\n#######\n\n# agrupar por año y mantener el año como índice\nyears_sum = df.groupby('YEAR').sum()['DQUA'].reset_index()\n# conseguir el dqua del año\nyears_sum[years_sum['YEAR']==2011]['DQUA']\n# agrupar por año para tener suma de dqua\na = df.groupby(['YEAR']).agg(DQUA_2=('DQUA','sum'))\n# unir las sumas con el df\ndf4 = df.join(a,on='YEAR')\n# crear columna de porcentaje por mes por año\ndf4['%porYear'] = (df4['DQUA'] / df4['DQUA_2'])\n# quitar la columna de dqua_2 que habíamos creado\ndf4.drop('DQUA_2',axis=1,inplace=True)\n\n######\n\n# agregar columna de TAM para poder dividir\ndf4['TAM'] = MXPAD\n\n######\n\n# ver resultado final\ndf4['TAM1PromMesGlob'] = (df4['TAM'] * df4['%meanYear']).round()\ndf4['TAM2PromMesAn'] = (df4['TAM'] * df4['%porYear']).round()\n\n# tabla final con las cantidades de TAM\ndf5 = df4.drop(['TAM', '%meanYear', '%porYear'],axis=1)\n#df5.head()\n\n\nOut[1]: \n\n\n\n\n\n\n  \n    \n      \n      YEAR\n      MONTH\n      DQUA\n      TasaDeCambio\n      CPIMex\n      Intereses\n      IGAE\n      CETES\n      GasolinaRegular\n      GasolinaPremium\n      CPIGas\n      Cobre\n      Aluminio\n      TexOil\n      GasNatural\n      Acero\n      EMBI\n      ElectricGenTransDist\n      RegistroRUV\n      VerificacionRUV\n      ProduccionRUV\n      PIBMex\n      PIBForFish\n      PIBConstr\n      PIBExtract\n      PIBManuf\n      PIBBev\n      PIBUtil\n      PIBElec\n      PIBServ\n      Lag12\n      Lag6\n      Lag3\n      Trimestre\n      Trimestre2\n      TAM1PromMesGlob\n      TAM2PromMesAn\n    \n  \n  \n    \n      0\n      2011\n      1\n      54.0\n      12.1\n      75.3\n      4.9\n      93.4\n      4.1\n      8.84\n      10.14\n      53.6\n      9555.0\n      2439.0\n      89.4\n      4.5\n      728.2\n      130.6\n      73.9\n      25395.27\n      22263.97\n      20575.54\n      86.06\n      2.72\n      6.51\n      4.04\n      15.26\n      3.88\n      1.32\n      1.02\n      51.55\n      73.0\n      63.0\n      89.0\n      T1\n      1\n      1805.0\n      403.0\n    \n    \n      1\n      2011\n      2\n      86.0\n      12.1\n      75.6\n      4.9\n      93.5\n      4.0\n      8.92\n      10.18\n      53.9\n      9867.0\n      2508.0\n      89.6\n      4.1\n      810.2\n      133.0\n      74.8\n      25193.89\n      22052.76\n      20575.13\n      86.06\n      2.72\n      6.51\n      4.04\n      15.26\n      3.88\n      1.32\n      1.02\n      51.55\n      73.0\n      38.0\n      167.0\n      T1\n      1\n      1776.0\n      641.0\n    \n    \n      2\n      2011\n      3\n      169.0\n      12.0\n      75.7\n      4.9\n      94.1\n      4.3\n      9.00\n      10.22\n      54.4\n      9530.0\n      2552.0\n      102.9\n      4.0\n      873.0\n      132.0\n      76.0\n      25060.77\n      21933.48\n      20508.80\n      86.06\n      2.72\n      6.51\n      4.04\n      15.26\n      3.88\n      1.32\n      1.02\n      51.55\n      92.0\n      107.0\n      112.0\n      T1\n      1\n      2241.0\n      1260.0\n    \n    \n      3\n      2011\n      4\n      55.0\n      11.7\n      75.7\n      4.9\n      93.6\n      4.3\n      9.08\n      10.26\n      55.0\n      9483.0\n      2662.0\n      110.0\n      4.2\n      847.0\n      134.1\n      73.0\n      25000.70\n      21876.70\n      20415.99\n      86.51\n      2.52\n      6.73\n      4.08\n      15.21\n      3.89\n      1.34\n      1.03\n      51.73\n      41.0\n      89.0\n      54.0\n      T2\n      2\n      1814.0\n      410.0\n    \n    \n      4\n      2011\n      5\n      138.0\n      11.7\n      75.2\n      4.9\n      94.5\n      4.3\n      9.16\n      10.30\n      55.2\n      8926.0\n      2592.0\n      101.3\n      4.3\n      789.6\n      140.7\n      71.6\n      24881.67\n      21755.70\n      20344.41\n      86.51\n      2.52\n      6.73\n      4.08\n      15.21\n      3.89\n      1.34\n      1.03\n      51.73\n      98.0\n      167.0\n      86.0\n      T2\n      2\n      1566.0\n      1029.0\n    \n  \n\n\n\n:::\n::: {.cell application/vnd.databricks.v1+cell=‘{“title”:“dfScaled (df5 scaled)”,“showTitle”:true,“inputWidgets”:{},“nuid”:“ec7f5ef3-9088-44da-b224-b6868515ff98”}’ execution_count=0}\n# quitar columnas que no queremos estandardizar\ndf6 = df5.drop(['Trimestre', 'YEAR', 'MONTH', 'TAM1PromMesGlob', 'TAM2PromMesAn', 'DQUA'], axis=1)\n\n# import library necesaria para el proceso\nfrom sklearn.preprocessing import MaxAbsScaler\n\n# crear instancia de Scaler\nabs_scaler = MaxAbsScaler()\n\n# hacer el fit de los datos\nabs_scaler.fit(df6)\n\n# transformar los datos\nscaled_data = abs_scaler.transform(df6)\n\n# regresarlo a un dataframe\ndfScaled = pd.DataFrame(scaled_data, columns = df6.columns)\n\n# volver a agregar columnas que habíamos quitado para no estandardizar\ndfScaled['YEAR'] = df5['YEAR']\ndfScaled['MONTH'] = df5['MONTH']\ndfScaled['TAM1PromMesGlob'] = df5['TAM1PromMesGlob']\ndfScaled['TAM2PromMesAn'] = df5['TAM2PromMesAn']\ndfScaled['DQUA'] = df5['DQUA']\n\n# cambiar el orden de las columnas de la tabla\ndfScaled = dfScaled[['YEAR', 'MONTH', 'DQUA', 'TAM1PromMesGlob', 'TAM2PromMesAn', 'TasaDeCambio', 'CPIMex', 'Intereses', 'IGAE', 'CETES', 'GasolinaRegular', 'GasolinaPremium', 'CPIGas', 'Cobre', 'Aluminio', 'TexOil', 'GasNatural',  'Acero', 'EMBI', 'ElectricGenTransDist', 'RegistroRUV', 'VerificacionRUV', 'ProduccionRUV', 'PIBMex', 'PIBForFish', 'PIBConstr', 'PIBExtract', 'PIBManuf', 'PIBBev', 'PIBUtil', 'PIBElec', 'PIBServ', 'Lag12', 'Lag6', 'Lag3', 'Trimestre2']]\n\ndfScaled.head()\n\n\nOut[14]: \n\n\n\n\n\n\n  \n    \n      \n      YEAR\n      MONTH\n      DQUA\n      TAM1PromMesGlob\n      TAM2PromMesAn\n      TasaDeCambio\n      CPIMex\n      Intereses\n      IGAE\n      CETES\n      GasolinaRegular\n      GasolinaPremium\n      CPIGas\n      Cobre\n      Aluminio\n      TexOil\n      GasNatural\n      Acero\n      EMBI\n      ElectricGenTransDist\n      RegistroRUV\n      VerificacionRUV\n      ProduccionRUV\n      PIBMex\n      PIBForFish\n      PIBConstr\n      PIBExtract\n      PIBManuf\n      PIBBev\n      PIBUtil\n      PIBElec\n      PIBServ\n      Lag12\n      Lag6\n      Lag3\n      Trimestre2\n    \n  \n  \n    \n      0\n      2011\n      1\n      54.0\n      1805.0\n      403.0\n      0.500000\n      0.666372\n      0.569767\n      0.822907\n      0.493976\n      0.435468\n      0.458824\n      0.424386\n      0.938236\n      0.916228\n      0.812727\n      0.750000\n      0.437804\n      0.327154\n      0.678604\n      0.301474\n      0.249904\n      0.629491\n      0.821968\n      0.770538\n      0.865691\n      0.973494\n      0.819109\n      0.810021\n      0.809816\n      0.790698\n      0.788106\n      0.105491\n      0.091040\n      0.128613\n      0.25\n    \n    \n      1\n      2011\n      2\n      86.0\n      1776.0\n      641.0\n      0.500000\n      0.669027\n      0.569767\n      0.823789\n      0.481928\n      0.439409\n      0.460633\n      0.426762\n      0.968873\n      0.942149\n      0.814545\n      0.683333\n      0.487104\n      0.333166\n      0.686869\n      0.299083\n      0.247534\n      0.629478\n      0.821968\n      0.770538\n      0.865691\n      0.973494\n      0.819109\n      0.810021\n      0.809816\n      0.790698\n      0.788106\n      0.105491\n      0.054913\n      0.241329\n      0.25\n    \n    \n      2\n      2011\n      3\n      169.0\n      2241.0\n      1260.0\n      0.495868\n      0.669912\n      0.569767\n      0.829075\n      0.518072\n      0.443350\n      0.462443\n      0.430721\n      0.935782\n      0.958678\n      0.935455\n      0.666667\n      0.524860\n      0.330661\n      0.697888\n      0.297503\n      0.246195\n      0.627449\n      0.821968\n      0.770538\n      0.865691\n      0.973494\n      0.819109\n      0.810021\n      0.809816\n      0.790698\n      0.788106\n      0.132948\n      0.154624\n      0.161850\n      0.25\n    \n    \n      3\n      2011\n      4\n      55.0\n      1814.0\n      410.0\n      0.483471\n      0.669912\n      0.569767\n      0.824670\n      0.518072\n      0.447291\n      0.464253\n      0.435471\n      0.931167\n      1.000000\n      1.000000\n      0.700000\n      0.509229\n      0.335922\n      0.670340\n      0.296790\n      0.245557\n      0.624610\n      0.826266\n      0.713881\n      0.894947\n      0.983133\n      0.816425\n      0.812109\n      0.822086\n      0.798450\n      0.790858\n      0.059249\n      0.128613\n      0.078035\n      0.50\n    \n    \n      4\n      2011\n      5\n      138.0\n      1566.0\n      1029.0\n      0.483471\n      0.665487\n      0.569767\n      0.832599\n      0.518072\n      0.451232\n      0.466063\n      0.437055\n      0.876473\n      0.973704\n      0.920909\n      0.716667\n      0.474719\n      0.352455\n      0.657484\n      0.295377\n      0.244199\n      0.622420\n      0.826266\n      0.713881\n      0.894947\n      0.983133\n      0.816425\n      0.812109\n      0.822086\n      0.798450\n      0.790858\n      0.141618\n      0.241329\n      0.124277\n      0.50\n    \n  \n\n\n\n:::\n::: {.cell application/vnd.databricks.v1+cell=‘{“title”:“Modelo regresivo TAM”,“showTitle”:true,“inputWidgets”:{},“nuid”:“ce5143d1-f8cc-4e30-9794-b53b0d7a16bd”}’ execution_count=0}\n# lo requerido para correr el modelo\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import r2_score\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom sklearn.metrics import mean_absolute_percentage_error\n\n# escogemos las variables del modelo\nx = dfScaled[['CPIMex', 'CETES', 'TexOil', 'GasNatural', 'EMBI', 'ElectricGenTransDist', 'ProduccionRUV', 'PIBManuf', 'PIBElec', 'Trimestre2']]\n\n# se escoge la columna que queremos predecir\n#y = df5['TAM2PromMesAn']\ny = dfScaled['TAM1PromMesGlob']\n\n# hacer el split\nx_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.3, random_state = 42)\n\n# se crea una instancia del modelo\nLR = LinearRegression()\n\n# hacemos un fit con la training data\nLR.fit(x_train, y_train)\n\n# se hacen predicciones en los datos de prueba\ny_prediction =  LR.predict(x_test)\n\n# encontramos las métricas de evaluación de modelo. estas mismas métricas están en los comentarios de cada prueba de modelo en esta misma celda\nr2=r2_score(y_test,y_prediction)\nMAE = mean_absolute_error(y_test, y_prediction)\nMAPE = mean_absolute_percentage_error(y_test, y_prediction)\nprint('R2: ',r2)\nprint('RMSE: ', np.sqrt(mean_squared_error(y_test, y_prediction)))\nprint('MAE: '+ str(MAE))\nprint('MAPE: ' + str(MAPE*100))\n\n\nR2:  0.73377175468551\nRMSE:  221.3918860833295\nMAE: 172.317401833042\nMAPE: 11.20547620551244\n\n\n:::\n::: {.cell application/vnd.databricks.v1+cell=‘{“title”:“Valor real vs pronóstico”,“showTitle”:true,“inputWidgets”:{},“nuid”:“6dad6ca2-09d1-40c9-bdba-590c09f8b6e7”}’ execution_count=0}\n# import libraries necesarias y ver valor contra predicción\nfrom matplotlib import pyplot as plt\nplt.scatter(y_test, y_prediction);\n\n\n\n:::\n::: {.cell application/vnd.databricks.v1+cell=‘{“title”:“Coeficientes del modelo”,“showTitle”:true,“inputWidgets”:{},“nuid”:“10b2f3d0-b8d6-41c2-b1a5-a22128e3e703”}’ execution_count=0}\n# coeficientes del modelo\nLR.coef_\n\n\nOut[13]: array([-8601.40441232,  -557.91130799, -1071.85203323,  -319.44190212,\n        -441.21237098,  3470.37129001,   444.85113828,  1189.9777836 ,\n        2286.88560531,   217.74757463])\n\n:::"
  },
  {
    "objectID": "notebooks/TAM2.html",
    "href": "notebooks/TAM2.html",
    "title": "Total Available Market",
    "section": "",
    "text": "r2: 0.73\nMAPE: 11.2%\nFor reference, the model was trying to predict the available market per month based on factors such as GDP, specific sector growth, etc. The estimate was made as units sold.\nUnfortunately, I no longer have access to the data, so I can’t replicate the model here and show appropriate illustrations. But, you can find the notebooks on this GitHub link."
  },
  {
    "objectID": "notebooks/tesoreria.html",
    "href": "notebooks/tesoreria.html",
    "title": "Treasury Cash Prediction",
    "section": "",
    "text": "I was tasked with creating a predictive model to minimize the error in estimates for dollar purchases. To do so, I employed a SARIMA model, since the data available to us was in the form of a time series. The result from the project was a decrease in MAPE from 30% to 10%, where the predictions came in the form of dollar amounts needed for each purchase.\nUnfortunately, I no longer have access to the data from the project, but you can find the code for the model in this GitHub page."
  },
  {
    "objectID": "index.html#home",
    "href": "index.html#home",
    "title": "My Portfolio",
    "section": "Home",
    "text": "Home\n\nAbout this page\n\nThe goal of this page is to tell you a bit about myself and to exhibit some of the projects I’ve worked on since I began my data science journey (circa 2020)\nYou will find some of the projects I’ve completed for online courses, work, and grad school\nYou can access my LinkedIn and GitHub pages from the top-left buttons\nFeel free to change between dark and light themes using the toggle\n\n\n\nSection descriptions\nThe About Me section details exposure to packages I’ve used. It also contains my Résumé and contact info. The three other sections showcase some of the deliverables I’ve created, in reverse chronological order. The Grad School tab is from late 2022, the Work tab is from 2020 to early 2022, and the Base Python tab is from late 2021.\n\n\nMy trajectory\nAs an undergrad, I studied Business Administration (INTL BUS & ISOM) and French Language and Literature. My program specializations taught me the importance of leveraging technology and data to grow a business, but it failed to build a mathematical foundation to help me understand the technical side of it all. This left me with a desire to dive deeper into the data world, so I decided to study Data Science in grad school. I hope to learn about different fields in this practice to get a holistic understanding of . After graduation, my intention is to work as a data scientist at a company that grants me creative freedom and encourages iterative data science, rather than linear problem solving.\n\n\nFree time\nI spend it playing sports (mainly soccer and racket sports), video games, and reading. I have two dogs back at home, Coco and Pucca, who I spend most of my time with (when home) and now I’ve also adopted two kittens (Edna and Remy) to have with me in DC. Aside from all this, I greatly enjoy listening to and playing music; some of my favorite artists are Stromae, Yanni, and Hanz Zimmer."
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#installing-necessary-libraries",
    "href": "notebooks/NLP_Final_Project.html#installing-necessary-libraries",
    "title": "NLP Final Project",
    "section": "Installing Necessary Libraries",
    "text": "Installing Necessary Libraries\nBefore we begin building our models and completing our task, we must ensure that we have the necessary libraries installed. Here, we will install the following:\n\ntransformers: this library allows us to access our GPT2 model, tokenizer, and other resources.\n\n\n\nCode\n# install transformers\n!pip install transformers\n\n\nGoogle Colab already has the other libraries that we need installed, such as torch, pandas, and numpy, so we can proceed with importing these libraries into our Python environment."
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#importing-necessary-libraries",
    "href": "notebooks/NLP_Final_Project.html#importing-necessary-libraries",
    "title": "NLP Final Project",
    "section": "Importing Necessary Libraries",
    "text": "Importing Necessary Libraries\nWith the required libraries installed on Google Colab, we can import them into our Python environment.\n\n\nCode\n# perform necessary imports\n\n# data manipulation libraries\nimport pandas as pd\nimport numpy as np\n\n# function for training-testing split\nfrom sklearn.model_selection import train_test_split\n\n# huggingface transformer libraries\nimport transformers\nfrom transformers import GPT2Tokenizer, GPT2LMHeadModel\nfrom transformers import get_linear_schedule_with_warmup\n\n# pytorch libraries\nimport torch\nfrom torch.optim import AdamW\nfrom torch.utils.data import Dataset, DataLoader, random_split\n\n# progress bar for model training\nfrom tqdm.auto import tqdm\n\n# Image library for displaying images\nfrom IPython.display import Image"
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#uploading-the-data",
    "href": "notebooks/NLP_Final_Project.html#uploading-the-data",
    "title": "NLP Final Project",
    "section": "Uploading the Data",
    "text": "Uploading the Data\nIn order to access the data that we’d like to use for our Python script generation task, we must upload it to Google Colab in a location that is accessible to us. We will upload our data, contained in the pythonTextData.txt file, to the current working directory provided by Google Colab."
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#read-in-the-data",
    "href": "notebooks/NLP_Final_Project.html#read-in-the-data",
    "title": "NLP Final Project",
    "section": "Read in the Data",
    "text": "Read in the Data\nWe first must read in the data. As specified in the previous section, we will be reading this data from the following location: ./pythonTextData.txt.\n\n\nCode\n# read in the data using a try-catch block for error-handling\ntry:  \n  with open(\"./pythonTextData.txt\", \"r\", encoding = \"utf8\") as file:\n    # read in the file as a list of lines\n    lines = file.readlines()\n    # report success and number of lines read in\n    print('The data has been read in successfully.')\n    print('The data contains', len(lines), 'lines.')\nexcept:\n  # report failure by raising exception\n  raise Exception('There was a problem reading in the data.')\n\n\nThe data has been read in successfully.\nThe data contains 42745 lines."
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#preprocess-the-data",
    "href": "notebooks/NLP_Final_Project.html#preprocess-the-data",
    "title": "NLP Final Project",
    "section": "Preprocess the Data",
    "text": "Preprocess the Data\nWe have read in our data, but we need to extract the information we need from it. The first several lines of the data look like the following:\n# write a python program to add two numbers\nnum1 = 1.5\nnum2 = 6.3\nsum = num1 + num2\nprint(f'Sum: {sum}')\n\n\n# write a python function to add two user provided numbers and return the sum\ndef add_two_numbers(num1, num2):\n    sum = num1 + num2\n    return sum\nAs we can see, the data is formatted in such a way that each prompt is on a line of its own and starts with a # character, just like a Python in-line comment. Each prompt is then followed by one or more lines that define the Python code that completes the task that the prompt raises. Finally, these code blocks are followed by two empty lines before the next prompt appears. We can utilize this structure in order to extract each prompt and its corresponding Python code block.\n\n\nCode\n# collect all indices of lines with '#'\nsrc_indexes = [i for i, line in enumerate(lines) if line.startswith('#')]\n# extract all those lines for use in the source column\nsrc = [lines[i].lower() for i in src_indexes]\n\n# collect all the targets by extracting the lines between the indices of the sources\ntgt = [''.join(lines[src_indexes[i]+1:src_indexes[i+1]]).lower() for i, value in enumerate(src_indexes[:-1])]\n# retrieve the last one as it is not captured by the line above\ntgt.append(''.join(lines[src_indexes[-1]+1:]))\n\n# assert that we collected the same number of sources and targets\\n\",\nassert len(src) == len(tgt), 'The number of sources (prompts) collected does not equal the number of targets (code blocks) collected.'\n\n# place source-target pairs into a data frame\npython_df = pd.DataFrame({'src':src, 'tgt':tgt})\n\n# create a new column that is the concatenation of each source-target pair\npython_df['txt'] = python_df['src'] + ' | ' + python_df['tgt']\n\n\nIt’s important to visually observe what we have done in our preprocessing steps, so let’s take a look at the first few rows of the data frame.\n\n\nCode\n# display the first five rows of the data frame\npython_df.head(5)\n\n\n\n\n  \n    \n      \n\n\n  \n    \n      \n      src\n      tgt\n      txt\n    \n  \n  \n    \n      0\n      # write a python program to add two numbers \\n\n      num1 = 1.5\\nnum2 = 6.3\\nsum = num1 + num2\\npri...\n      # write a python program to add two numbers \\n...\n    \n    \n      1\n      # write a python function to add two user prov...\n      def add_two_numbers(num1, num2):\\n    sum = nu...\n      # write a python function to add two user prov...\n    \n    \n      2\n      # write a program to find and print the larges...\n      \\nnum1 = 10\\nnum2 = 12\\nnum3 = 14\\nif (num1 >=...\n      # write a program to find and print the larges...\n    \n    \n      3\n      # write a program to find and print the smalle...\n      num1 = 10\\nnum2 = 12\\nnum3 = 14\\nif (num1 <= n...\n      # write a program to find and print the smalle...\n    \n    \n      4\n      # write a python function to merge two given l...\n      def merge_lists(l1, l2):\\n    return l1 + l2\\n...\n      # write a python function to merge two given l...\n    \n  \n\n\n      \n        \n  \n    \n    \n  \n      \n      \n  \n\n      \n    \n  \n  \n\n\nThe last task that we want to complete here is splitting the data into training and testing sets. In the unique case of our Python script generation task, we will actually retain nearly all the data for model training and hold out 10 prompts for testing. We believe that this will allow our model to train as fully as it can, while still allowing us to use prompts from the data for testing.\nWe can print the shape of each data frame in order to ensure that this split is performed correctly. With 4,958 initial source-target pairs, we should see that 4,948 are kept in the training set and 10 are placed in the testing set.\n\n\nCode\n# retain 10 prompts for testing, keep the rest for training\npython_df_train, python_df_test = train_test_split(python_df, test_size = 10)\n\n# report the shape of each set\nprint('Training Set Shape:', python_df_train.shape)\nprint('Testing Set Shape:', python_df_test.shape)\n\n\nTraining Set Shape: (4948, 3)\nTesting Set Shape: (10, 3)"
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#define-hyperparameters",
    "href": "notebooks/NLP_Final_Project.html#define-hyperparameters",
    "title": "NLP Final Project",
    "section": "Define Hyperparameters",
    "text": "Define Hyperparameters\nWe can first define some hyperparameters that we will use throughout this section. These include:\n\nbsize: the batch size to use when batching data\nepochs: the number of epochs to use in training\nlr_init: the initial rate by which the model learns\nwarmup_steps: the number of steps to take during training before utilizing the initialized learning rate\n\nNote that we will use a very small batch size (bsize = 2) in order to preserve limited memory resources on Google Colab’s GPU.\n\n\nCode\n# define hyperparameters\nbsize = 2\nepochs = 5\nlr_init = 1e-5\nwarmup_steps = 100"
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#build-the-tokenizer",
    "href": "notebooks/NLP_Final_Project.html#build-the-tokenizer",
    "title": "NLP Final Project",
    "section": "Build the Tokenizer",
    "text": "Build the Tokenizer\nWe will retrieve our tokenizer using the pretrained gpt2 option provided by Hugging Face. We also include additional special tokens, as follows:\n\nBeginning of Sentence (BOS) Token: <SOS>\nEnd of Sentence (EOS) Token: <EOS>\nPad (PAD) Token: <PAD>\n\n\n\nCode\n# initialize the tokenizer\ntokenizer = GPT2Tokenizer.from_pretrained('gpt2', bos_token='<SOS>', eos_token='<EOS>', pad_token='<PAD>')\n\n\nSpecial tokens have been added in the vocabulary, make sure the associated word embeddings are fine-tuned or trained."
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#build-the-dataset",
    "href": "notebooks/NLP_Final_Project.html#build-the-dataset",
    "title": "NLP Final Project",
    "section": "Build the Dataset",
    "text": "Build the Dataset\nWe will use torch.utils.data’s Dataset and DataLoader features in order to construct our dataset in such a way that is compatible with our model (PyTorch: Datasets & DataLoaders).\nFirst, we will create a class Python_Dataset using torch.utils.data’s Dataset.\n\n\nCode\n# 'Python_Dataset' class for our python text data\nclass Python_Dataset(Dataset):\n\n  # we need an __init__ function\n  def __init__(self, input_txt, input_tokenizer):# do we need these?, gpt2_type=\"gpt2\", max_length=768):\n\n    # store the incoming tokenizer as an attribute of the instance\n    self.tokenizer = input_tokenizer\n    # create attributes to store input IDs and attention masks\n    self.input_ids_list = []; self.attention_mask_list = []\n\n    # iterate through each source-target pair\n    for txt in input_txt:\n      # encode the text using special tokens defined above\n      encodings_dict = input_tokenizer('<SOS>'+ txt + '<EOS>', truncation = True, padding = \"max_length\") # , max_length = max_length)\n      # store the encoded input IDs and attention mask as tensors\n      input_ids = torch.tensor(encodings_dict['input_ids'])\n      attention_mask = torch.tensor(encodings_dict['attention_mask'])\n      # append the input IDs and attention mask to the class attribute lists\n      self.input_ids_list.append(input_ids)\n      self.attention_mask_list.append(attention_mask)\n\n  # we need a __len__ function \n  def __len__(self):\n    # return the number of lists of input IDs gathered (should match number of texts)\n    return len(self.input_ids_list)\n\n  # we need a __getitem__ function\n  def __getitem__(self, idx):\n    # return a tuple of the input IDs and attention mask for the current item\n    return self.input_ids_list[idx], self.attention_mask_list[idx] \n\n\nNext, we will create an instance of the Python_Dataset class using the class constructor and the data frame that we stored our training data in, python_df_train.\n\n\nCode\n# create instance of Python_Dataset class\npython_dataset_train = Python_Dataset(python_df_train['txt'], tokenizer)\n\n\nNow, we can wrap an iterable around our dataset using torch.utils.data’s DataLoader. According to documentation for this feature, wrapping an iterable around the dataset allows the observations within the dataset to be more easily accessed.\nWe can once again ensure that our data has been loaded properly by observing the length of our DataLoader object. Using a batch size of 2, we can expect the DataLoader to have ceil(\\(\\frac{4948}{2}\\))= 2,474 batches.\n\n\nCode\n# create the data loader for the training set\ntrain_batches = DataLoader(python_dataset_train, batch_size = bsize)\n\n# report the number of loaded batches for the training set\nprint('Number of Training Batches:', len(train_batches))\n\n\nNumber of Training Batches: 2474"
  },
  {
    "objectID": "notebooks/NLP_Final_Project.html#build-the-model",
    "href": "notebooks/NLP_Final_Project.html#build-the-model",
    "title": "NLP Final Project",
    "section": "Build the Model",
    "text": "Build the Model\nWe will use transformers’ GPT2LMHeadModel here in order to retrieve our model. Using the gpt2 option as we used with the tokenizer, we can retrieve a manageable version of GPT2.\nWe must also resize the token embeddings here, as we have added special tokens to our tokenizer (<SOS>, <EOS>, and <PAD>). This way, our pretrained tokenizer and model can be compatible with one another.\n\n\nCode\n# initialize the model using gpt2\nmodel = GPT2LMHeadModel.from_pretrained(\"gpt2\")\n\n# resize token embeddings, as explained above\nmodel.resize_token_embeddings(len(tokenizer));\n\n\n\n\n\nSince our model will require strong computational resources, we could place the model directly on Google Colab’s GPU, but we opt for a safer way of doing so. Below, we only place the model on the GPU if it is available.\n\n\nCode\n# send the model to the available device\nif torch.cuda.is_available():\n  # if available, use GPU\n  device = torch.device('cuda:0')\nelse:\n  # otherwise, use CPU\n  device = torch.device('cpu')\n\n# push the model to the selected device\nmodel.to(device);\n\n# report the device that the model was pushed to\nprint('The model has been pushed to device:', device)\n\n\nThe model has been pushed to device: cuda:0\n\n\nWe can also initialize our optimizer and create a scheduled learning rate. These components will allow our model to learn in a more constructive way, rather than a more erratic one.\nNote that we use torch.optim.AdamW here, rather than transformers.AdamW, because the latter is deprecated.\n\n\nCode\n# initialize optimizer\noptimizer = AdamW(model.parameters(), lr = lr_init)\n\n# initialize a scheduled learning rate\nlr = get_linear_schedule_with_warmup(\n    optimizer, num_warmup_steps = warmup_steps, \n    num_training_steps = len(train_batches))"
  }
]